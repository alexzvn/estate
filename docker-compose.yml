version: '3'

services:

  #PHP Service
  php-fpm:
    build:
      context: .
      dockerfile: dockerfile
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./.docker/supervisord.conf:/etc/supervisord.conf
      - ./.docker/supervisord.d:/etc/supervisord.d
    networks:
      - app-network
      - queue-network
      - db-network
    depends_on:
      - database
      - cache

  queue:
    build:
      context: .
      dockerfile: cli.dockerfile
    restart: unless-stopped
    command: php artisan queue:work
    volumes:
      - ./:/var/www/html
    networks:
      - app-network
      - queue-network
      - db-network
    depends_on:
      - database
      - cache

  scheduler:
    build:
      context: .
      dockerfile: cli.dockerfile
    command: php artisan schedule:work
    volumes:
      - ./:/var/www/html
    networks:
      - app-network
      - queue-network
      - db-network
    depends_on:
      - database
      - cache

  webserver:
    build:
      context: .
      dockerfile: cli.dockerfile
    command: php artisan serve --host=0.0.0.0 --port=${APP_PORT}
    ports:
      - "${APP_PORT}:80"
    volumes:
      - ./:/var/www/html
    networks:
      - app-network
      - queue-network
      - db-network
    depends_on:
      - database
      - cache
      - elastic

  #Nginx Service
  # webserver:
  #   image: nginx:alpine
  #   restart: unless-stopped
  #   ports:
  #     - "${APP_PORT}:80"
  #   volumes:
  #     - ./:/var/www/html
  #     - .docker/nginx/conf.d/:/etc/nginx/conf.d/
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: wget --quiet --tries=1 --spider http://localhost || exit 1z
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # DB UI management service
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - ${ADMINER_PORT}:8080
    networks:
      - db-network

  #MySQL Service
  database:
    image: mysql:5.7.22
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: rootpass
    volumes:
      - .docker/data/db:/var/lib/mysql/
      - .docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - db-network
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      interval: 30s
      timeout: 10s
      retries: 5

  elastic:
    image: elasticsearch:7.1.0
    restart: unless-stopped
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - .docker/data/elastic:/usr/share/elasticsearch/data
    networks:
      - db-network
    ulimits:
      memlock:
        soft: -1
        hard: -1

  cache:
    image: redis:5-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - .docker/data/redis:/data
    restart: unless-stopped
    networks:
      - queue-network
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 5

#Docker Networks
networks:
  app-network:
    driver: bridge
  queue-network:
    driver: bridge
  db-network:
    driver: bridge
